server:
  port: 8080

grpc:
  client:
    product-service:
      address: 'static://localhost:9090'
      negotiationType: plaintext

spring:
  datasource:
    url: jdbc:postgresql://localhost:5432/ecommerce
    username: ecommerce
    password: ecommerce
    driver-class-name: org.postgresql.Driver

  jpa:
    hibernate:
      ddl-auto: none
    show-sql: true
    database: postgresql
    open-in-view: false
    generate-ddl: false

  redis:
    host: localhost
    port: 6379
    password: # se houver senha
    timeout: 2000ms
    lettuce:
      pool:
        max-active: 8
        max-idle: 8
        min-idle: 0

  graphql:
    graphiql:
        enabled: true
        path: /graphql

  kafka:
    bootstrap-servers: localhost:9092
    producer:
      # Serializador para a chave da mensagem.
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      # Serializador para o valor da mensagem.
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer

      properties:
        spring.json.add.type.headers: false # Para o valor (payload)
        spring.json.add.type.headers.keys: false # <--- ISSO É CRÍTICO para a CHAVE STRING

        # Acks (Acknowledge): Define o nível de garantia de entrega da mensagem.
        # - 0: Produtor não espera por ACK. Mais rápido, menor garantia.
        # - 1: Produtor espera ACK do líder da partição. Bom equilíbrio entre velocidade e garantia.
        # - all (ou -1): Produtor espera ACK de todas as réplicas in-sync (ISRs). Mais lento, maior garantia.
        acks: 1

        # Retries: Número de vezes que o produtor tentará reenviar uma mensagem em caso de falha temporária.
        retries: 3

        # Tempo em milissegundos para esperar antes de tentar reenviar uma mensagem (se 'retries' > 0).
        # É bom dar um pequeno atraso para evitar sobrecarregar o broker.
        retry.backoff.ms: 1000 #
    topics:
        order-create: order-create

springdoc:
  api-docs:
    path: /v3/api-docs
    enabled: true
  swagger-ui:
    path: /swagger-ui.html
    enabled: true
    operationsSorter: method
    tagsSorter: alpha
  info:
    title: E-commerce BFF API
    description: API para entrada de dados no e-commerce
    version: 1.0.0
    contact:
      name: Arthur Santana
      email: arthurgn.santana@gmail.com

# Configurações JWT
jwt:
  secret: 7JU9or21W3WnuZ+QnIu/Ksl6V1uGvfX3E5WvhT+Un2Qn+WXzKsX6GRHuJ+ho7AKt
  expirationAccessToken: 3600000  # 1 hora em milissegundos
  expirationRefreshToken: 604800000  # 7 dias em milissegundos

# Clients configuration
clients:
  ecomm-service:
    url: http://localhost:8081/api

feign:
  client:
    config:
      ecommerce-service:
        connect-timeout: 5000
        read-timeout: 5000

# Actuator configuration
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,circuitbreakers,retries
  endpoint:
    health:
      show-details: always

# Resilience4j configuration
resilience4j:
  circuitbreaker:
    instances:
      ecomm-service:
        register-health-indicator: true
        sliding-window-size: 10
        minimum-number-of-calls: 5
        permitted-number-of-calls-in-half-open-state: 3
        automatic-transition-from-open-to-half-open-enabled: true
        wait-duration-in-open-state: 5s
        failure-rate-threshold: 50
        slow-call-rate-threshold: 50
        slow-call-duration-threshold: 4s

  retry:
    instances:
      ecomm-service:
        max-attempts: 3
        wait-duration: 1s
        exponential-backoff-multiplier: 2
        ignore-exceptions:
          - java.lang.IllegalArgumentException
        retry-exceptions:
          - org.springframework.web.client.RestClientException
          - feign.FeignException

#  timelimiter:
#    instances:
#      ecomm-service:
#        timeout-duration: 5s
#        cancel-running-future: true